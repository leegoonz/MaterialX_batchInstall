# Copyright 2020 Adobe. All rights reserved.
# This file is licensed to you under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License. You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
# OF ANY KIND, either express or implied. See the License for the specific language
# governing permissions and limitations under the License.

import os

from .paths import getShaderDirectory


def __getSurfaceShaderMap():
    __SHADER_DIR = getShaderDirectory()
    __SURFACE_TYPES_MAP = {
        'physicallyMetallicRoughnessDk': {
            'glslfx_template': os.path.join(
                __SHADER_DIR, 'matx_metallic_roughness_template.glslfx'),
            'glslfx_output': os.path.join(
                __SHADER_DIR, 'matx_metallic_roughness_generated.glslfx'),
            'glsl_output': os.path.join(
                __SHADER_DIR, 'physically_metallic_roughness', 'matx.glsl')
        },
        'standard_surface': {
            'glslfx_template': os.path.join(
                __SHADER_DIR, 'standard_surface_template.glslfx'),
            'glslfx_output': os.path.join(
                __SHADER_DIR, 'standard_surface_generated.glslfx'),
            'glsl_output': os.path.join(
                __SHADER_DIR, 'standard_surface', 'matx.glsl')
        }
    }
    return __SURFACE_TYPES_MAP


def getGLSLFXOutputShaderFromUbershader(ubershader_name):
    shader_data = __getSurfaceShaderMap().get(ubershader_name, None)
    if shader_data:
        return shader_data['glslfx_output']
    else:
        raise BaseException(
            'No output file found for ubershader {}'.format(ubershader_name))


def getGLSLFXOutputFiles(materialx_document):
    # Identify what shader is used
    materials = materialx_document.getMaterials()
    if len(materials) != 1:
        raise BaseException(
            'Multiple materials found when auto detecting glslfx output files')
    material = materials[0]
    referenced_shader = material.getShaderRefs()[0].getNodeString()
    surface_types = __getSurfaceShaderMap()
    if referenced_shader not in surface_types:
        raise BaseException(
            'Unknown material {} when auto detecting glslfx output files'.
            format(referenced_shader))
    return surface_types[referenced_shader]


def getPackageFromResource(resource):
    """
    Finds the package a resource lives in
    TODO: Is this really this hard?
    """
    import sd
    url = resource.getUrl()
    pkg_manager = sd.getContext().getSDApplication().getPackageMgr()
    for p in pkg_manager.getPackages():
        for r in p.getChildrenResources(False):
            if r.getUrl() == url:
                return p
    return None


def __isCallable(o, method_name):
    op = getattr(o, method_name, None)
    return callable(op)


def setErrorViewport(target_path):
    import shutil
    shutil.copy(os.path.join(getShaderDirectory(),
                             'reset.glslfx'), target_path)


def reloadViewport(glslfx_file):
    import sd

    # Avoid issue if running on SD without loadShader support
    if __isCallable(sd.getContext().getSDApplication(), 'loadShader'):
        # Hack to reset shader parameters
        reset_path = os.path.join(getShaderDirectory(), 'reset.glslfx')
        sd.getContext().getSDApplication().loadShader(reset_path)

        sd.getContext().getSDApplication().loadShader(glslfx_file)


def extractReferenceUid(url):
    return url.split('=')[-1]


def isMtlxGraph(sd_graph):
    '''
    We have no exact way to figure out whether a graph is a materialx graph
    or not so we have to use heuristics. It's neither fool proof nor without
    false positives at this point.
    :param sd_graph: The graph to check
    :type sd_graph: sd.api.sdgraph.SDGraph
    :return:
    '''
    from sd.api.mdl.sdmdlgraph import SDMDLGraph
    if not isinstance(sd_graph, SDMDLGraph):
        # Early out for non-mdl graphs
        return False
    for n in sd_graph.getNodes():
        if n is not None:
            def_id = n.getDefinition().getId()
            if def_id.startswith('mdl::mtlx::'):
                return True
    return False


def isKnownMDLIssue(e):
    '''
    Checks if the exception represents a known mdl issue so we can report a better error message
    :param e: BaseException
    :return: str or None
    '''
    from .mdl2mtlx import UnsupportedMDLType
    if isinstance(e, UnsupportedMDLType):
        if e.node_name == 'mdl::selector' or e.node_name.startswith('mdl::base::file_texture'):
            return 'Unsupported node in graph. This is likely to be caused by autogenerated nodes\n' + \
                   'when connecting a texture2d directly to a color.\n' +\
                   'Use the image family of MaterialX nodes to avoid this'
    return None
